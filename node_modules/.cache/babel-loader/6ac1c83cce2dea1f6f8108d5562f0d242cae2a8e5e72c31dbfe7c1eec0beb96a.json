{"ast":null,"code":"var _jsxFileName = \"/Users/joseignacio/Developer/caixabanktech-hackathon/src/components/Statistics.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useStore } from \"@nanostores/react\";\nimport { transactionsStore } from \"../stores/transactionStore\";\nimport { Paper, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Statistics() {\n  _s();\n  const transactions = useStore(transactionsStore);\n\n  // Filter transactions by 'expense' type\n  // Instructions:\n  // - Implement logic to filter the transactions array to only include expenses.\n  const expenses = transactions.filter(transaction => transaction.type === \"expense\");\n\n  // Calculate total expense\n  // Instructions:\n  // - Sum the amounts of all expense transactions.\n  const totalExpense = expenses.reduce((acc, transaction) => acc + transaction.amount, 0);\n\n  // Get unique dates from expenses\n  // Instructions:\n  // - Extract the unique dates from the expense transactions.\n  // - Calculate the average daily expense.\n  const uniqueDates = [...new Set(expenses.map(expense => expense.date))];\n  const averageDailyExpense = uniqueDates.length ? totalExpense / uniqueDates.length : 0;\n\n  // Find the category with the highest spending\n  // Instructions:\n  // - Use the categoryExpenses object to accumulate the total amount spent in each category.\n  // - Implement logic to determine which category has the highest total expense.\n  // - Ensure that `maxCategory` contains the category with the highest spending.\n  const categoryExpenses = expenses.reduce((acc, transaction) => {\n    acc[transaction.category] = (acc[transaction.category] || 0) + transaction.amount;\n    return acc;\n  }, {});\n  let maxCategory = Object.keys(categoryExpenses).reduce((max, category) => categoryExpenses[category] > (categoryExpenses[max] || 0) ? category : max, null);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      padding: 2,\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Key Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Average Daily Expense: \", averageDailyExpense.toFixed(2), \" \\u20AC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Highest Spending Category:\", \" \", maxCategory ? `${maxCategory} (${categoryExpenses[maxCategory].toFixed(2)} €)` : \"No data available\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Statistics, \"52/uAtyVozySgKSxoUjJRTrfEzA=\", false, function () {\n  return [useStore];\n});\n_c = Statistics;\nexport default Statistics;\nvar _c;\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"names":["React","useStore","transactionsStore","Paper","Typography","jsxDEV","_jsxDEV","Statistics","_s","transactions","expenses","filter","transaction","type","totalExpense","reduce","acc","amount","uniqueDates","Set","map","expense","date","averageDailyExpense","length","categoryExpenses","category","maxCategory","Object","keys","max","sx","padding","mt","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/joseignacio/Developer/caixabanktech-hackathon/src/components/Statistics.js"],"sourcesContent":["import React from \"react\";\nimport { useStore } from \"@nanostores/react\";\nimport { transactionsStore } from \"../stores/transactionStore\";\nimport { Paper, Typography } from \"@mui/material\";\n\nfunction Statistics() {\n  const transactions = useStore(transactionsStore);\n\n  // Filter transactions by 'expense' type\n  // Instructions:\n  // - Implement logic to filter the transactions array to only include expenses.\n  const expenses = transactions.filter(\n    (transaction) => transaction.type === \"expense\"\n  );\n\n  // Calculate total expense\n  // Instructions:\n  // - Sum the amounts of all expense transactions.\n  const totalExpense = expenses.reduce(\n    (acc, transaction) => acc + transaction.amount,\n    0\n  );\n\n  // Get unique dates from expenses\n  // Instructions:\n  // - Extract the unique dates from the expense transactions.\n  // - Calculate the average daily expense.\n  const uniqueDates = [...new Set(expenses.map((expense) => expense.date))];\n  const averageDailyExpense = uniqueDates.length\n    ? totalExpense / uniqueDates.length\n    : 0;\n\n  // Find the category with the highest spending\n  // Instructions:\n  // - Use the categoryExpenses object to accumulate the total amount spent in each category.\n  // - Implement logic to determine which category has the highest total expense.\n  // - Ensure that `maxCategory` contains the category with the highest spending.\n  const categoryExpenses = expenses.reduce((acc, transaction) => {\n    acc[transaction.category] =\n      (acc[transaction.category] || 0) + transaction.amount;\n    return acc;\n  }, {});\n\n  let maxCategory = Object.keys(categoryExpenses).reduce(\n    (max, category) =>\n      categoryExpenses[category] > (categoryExpenses[max] || 0)\n        ? category\n        : max,\n    null\n  );\n\n  return (\n    <Paper sx={{ padding: 2, mt: 2 }}>\n      <Typography variant=\"h6\">Key Statistics</Typography>\n      <Typography>\n        Average Daily Expense: {averageDailyExpense.toFixed(2)} €\n      </Typography>\n      <Typography>\n        Highest Spending Category:{\" \"}\n        {maxCategory\n          ? `${maxCategory} (${categoryExpenses[maxCategory].toFixed(2)} €)`\n          : \"No data available\"}\n      </Typography>\n    </Paper>\n  );\n}\n\nexport default Statistics;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,KAAK,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,YAAY,GAAGR,QAAQ,CAACC,iBAAiB,CAAC;;EAEhD;EACA;EACA;EACA,MAAMQ,QAAQ,GAAGD,YAAY,CAACE,MAAM,CACjCC,WAAW,IAAKA,WAAW,CAACC,IAAI,KAAK,SACxC,CAAC;;EAED;EACA;EACA;EACA,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,MAAM,CAClC,CAACC,GAAG,EAAEJ,WAAW,KAAKI,GAAG,GAAGJ,WAAW,CAACK,MAAM,EAC9C,CACF,CAAC;;EAED;EACA;EACA;EACA;EACA,MAAMC,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACT,QAAQ,CAACU,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;EACzE,MAAMC,mBAAmB,GAAGL,WAAW,CAACM,MAAM,GAC1CV,YAAY,GAAGI,WAAW,CAACM,MAAM,GACjC,CAAC;;EAEL;EACA;EACA;EACA;EACA;EACA,MAAMC,gBAAgB,GAAGf,QAAQ,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,WAAW,KAAK;IAC7DI,GAAG,CAACJ,WAAW,CAACc,QAAQ,CAAC,GACvB,CAACV,GAAG,CAACJ,WAAW,CAACc,QAAQ,CAAC,IAAI,CAAC,IAAId,WAAW,CAACK,MAAM;IACvD,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,IAAIW,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACJ,gBAAgB,CAAC,CAACV,MAAM,CACpD,CAACe,GAAG,EAAEJ,QAAQ,KACZD,gBAAgB,CAACC,QAAQ,CAAC,IAAID,gBAAgB,CAACK,GAAG,CAAC,IAAI,CAAC,CAAC,GACrDJ,QAAQ,GACRI,GAAG,EACT,IACF,CAAC;EAED,oBACExB,OAAA,CAACH,KAAK;IAAC4B,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAC,QAAA,gBAC/B5B,OAAA,CAACF,UAAU;MAAC+B,OAAO,EAAC,IAAI;MAAAD,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACpDjC,OAAA,CAACF,UAAU;MAAA8B,QAAA,GAAC,yBACa,EAACX,mBAAmB,CAACiB,OAAO,CAAC,CAAC,CAAC,EAAC,SACzD;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbjC,OAAA,CAACF,UAAU;MAAA8B,QAAA,GAAC,4BACgB,EAAC,GAAG,EAC7BP,WAAW,GACR,GAAGA,WAAW,KAAKF,gBAAgB,CAACE,WAAW,CAAC,CAACa,OAAO,CAAC,CAAC,CAAC,KAAK,GAChE,mBAAmB;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEZ;AAAC/B,EAAA,CA5DQD,UAAU;EAAA,QACIN,QAAQ;AAAA;AAAAwC,EAAA,GADtBlC,UAAU;AA8DnB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}